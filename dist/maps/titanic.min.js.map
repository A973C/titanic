{"version":3,"sources":["titanic.js"],"names":["Titanic","playOn","this","anim","playSegments","startAnimationIndex","halfAnimationIndex","state","playOff","endAnimationIndex","playAll","toggle","on","off","initialize","baseURL","callback","document","addEventListener","titanicElements","getElementsByClassName","i","length","element","match","className","titanicIcons","unshift","TitanicItem","isInitialized","findItem","token","titanicToken","applyMethod","itemToken","methodToken","titanicItem","self","bodymovin","loadAnimation","container","renderer","loop","autoplay","path","bind","play","items"],"mappings":"AAAA,GAAAA,UAEA,WAQA,QAAAC,KACAC,KAAAC,KAAAC,cAAAC,EAAAC,IAAA,GACAJ,KAAAK,MAAA,EAGA,QAAAC,KACAN,KAAAC,KAAAC,cAAAE,EAAA,EAAAG,IAAA,GACAP,KAAAK,MAAA,EAGA,QAAAG,KACAR,KAAAC,KAAAC,cAAAC,EAAAI,IAAA,GACAP,KAAAK,MAAA,EAGA,QAAAI,KACA,IAAAT,KAAAK,MACAL,KAAAU,KAEAV,KAAAW,MAmCA,QAAAC,GAAAC,EAAAC,GACAD,EAAAA,GAAA,2DAEAE,SAAAC,iBAAA,mBAAA,WAIA,IAHA,GAAAC,GAAAF,SAAAG,uBAAA,WACAC,EAAAF,EAAAG,OAEAD,GAAA,CACA,GAAAE,GAAAJ,IAAAE,GACAG,EAAAD,EAAAE,UAAAD,MAAA,mBACAA,IAAAA,EAAAF,QAAAE,EAAA,IACAE,EAAAC,QAAA,GAAAC,GAAAL,EAAAC,EAAA,GAAAT,IAIAc,GAAA,EACA,kBAAAb,IACAA,MAKA,QAAAc,GAAAC,GACA,GAAAF,EAGA,IAAA,GAAAR,GAAAK,EAAAJ,OAAA,EAAAD,GAAA,EAAAA,IACA,GAAAK,EAAAL,GAAAW,eAAAD,EACA,MAAAL,GAAAL,GAKA,QAAAY,GAAAC,EAAAC,GACA,GAAAC,GAAAN,EAAAI,EACAE,IAAA,kBAAAA,GAAAD,IACAC,EAAAD,KAhGA,GAAA9B,GAAA,EACAC,EAAA,GACAG,EAAA,GA2BAmB,EAAA,SAAAL,EAAAQ,EAAAhB,GACA,GAAAsB,GAAAnC,IAGAmC,GAAAL,aAAAD,EACAM,EAAA9B,MAAA,EACA8B,EAAAlC,KAAAmC,UAAAC,eACAC,UAAAjB,EACAkB,SAAA,MACAC,MAAA,EACAC,UAAA,EACAC,KAAA7B,EAAAgB,EAAA,UAIAM,EAAAzB,GAAAX,EAAA4C,KAAAR,GACAA,EAAAxB,IAAAL,EAAAqC,KAAAR,GACAA,EAAAS,KAAApC,EAAAmC,KAAAR,GACAA,EAAA1B,OAAAA,EAAAkC,KAAAR,GAIAd,EAAAL,iBAAA,eAAAmB,EAAA1B,QACAY,EAAAL,iBAAA,eAAAmB,EAAA1B,SAKAe,KACAG,GAAA,CA0CA7B,SAAA,SAAAe,GACA,GAAAsB,GAAAnC,IACAY,GAAAC,EAAA,WACAsB,EAAAU,MAAArB,EACAW,EAAAR,cAAA,WACA,MAAAA,IAEAQ,EAAAzB,GAAA,SAAAmB,GACAE,EAAAF,EAAA,OAEAM,EAAAxB,IAAA,SAAAkB,GACAE,EAAAF,EAAA,QAEAM,EAAAS,KAAA,SAAAf,GACAE,EAAAF,EAAA","file":"../js/titanic.min.js","sourcesContent":["var Titanic; // a global library container\n\n(function () {\n\n  var startAnimationIndex = 0;\n  var halfAnimationIndex = 13;\n  var endAnimationIndex = 27;\n\n  // --------- Titanic Item ---------- //\n\n  function playOn() {\n    this.anim.playSegments([startAnimationIndex, halfAnimationIndex], true);\n    this.state = 1;\n  }\n\n  function playOff() {\n    this.anim.playSegments([halfAnimationIndex + 1, endAnimationIndex], true);\n    this.state = 0;\n  }\n\n  function playAll() {\n    this.anim.playSegments([startAnimationIndex, endAnimationIndex], true);\n    this.state = 0;\n  }\n\n  function toggle() {\n    if (this.state === 0) {\n      this.on();\n    } else {\n      this.off();\n    }\n  }\n\n  var TitanicItem = function (element, token, baseURL) {\n    var self = this;\n\n    // props\n    self.titanicToken = token;\n    self.state = 0;\n    self.anim = bodymovin.loadAnimation({\n      container: element,\n      renderer: 'svg',\n      loop: false,\n      autoplay: false,\n      path: baseURL + token + '.json'\n    });\n\n    // methods\n    self.on = playOn.bind(self);\n    self.off = playOff.bind(self);\n    self.play = playAll.bind(self);\n    self.toggle = toggle.bind(self);\n\n    // Feel free to handle any other events here, not just click or hover\n    // element.addEventListener(\"click\", toggle);\n    element.addEventListener(\"pointerenter\", self.toggle);\n    element.addEventListener(\"pointerleave\", self.toggle);\n  };\n\n  // --------- Titanic Library ---------- //\n\n  var titanicIcons = [];\n  var isInitialized = false;\n\n  function initialize(baseURL, callback) {\n    baseURL = baseURL || 'https://cdn.rawgit.com/icons8/titanic/master/dist/icons/';\n\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      var titanicElements = document.getElementsByClassName('titanic');\n      var i = titanicElements.length;\n\n      while (i) {\n        var element = titanicElements[--i];\n        var match = element.className.match(/titanic-([^\\s]+)/);\n        if (match && match.length && match[1]) {\n          titanicIcons.unshift(new TitanicItem(element, match[1], baseURL));\n        }\n      }\n\n      isInitialized = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n    });\n  }\n\n  function findItem(token) {\n    if (!isInitialized) {\n      return;\n    }\n    for (var i = titanicIcons.length - 1; i >= 0; i--) {\n      if (titanicIcons[i].titanicToken === token) {\n        return titanicIcons[i];\n      }\n    }\n  }\n\n  function applyMethod(itemToken, methodToken) {\n    var titanicItem = findItem(itemToken);\n    if (titanicItem && typeof titanicItem[methodToken] === 'function') {\n      titanicItem[methodToken]();\n    }\n  }\n\n  Titanic = function (baseURL) {\n    var self = this;\n    initialize(baseURL, function () {\n      self.items = titanicIcons;\n      self.isInitialized = function () {\n        return isInitialized;\n      }\n      self.on = function (token) {\n        applyMethod(token, 'on');\n      }\n      self.off = function (token) {\n        applyMethod(token, 'off');\n      }\n      self.play = function (token) {\n        applyMethod(token, 'play');\n      }\n    });\n  };\n\n})();"]}